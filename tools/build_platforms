#!/bin/bash -e

# Build platform-specific versions of HTML5 app.

# Copyright 2012 SpiderOak, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# PhoneGap is used to do the platform hybridization. Building also depends
# on having the platform's sdk, of course.
#
# Since the platform-specific versions depend on the elements of the
# respective releases, prep_release is used with the same parameters, so
# that the relevant release is prepared.
#
# Unlike prep_release, we require that the command includes some explicitly
# specified variant selectors, or "--all", since building takes
# significantly longer than just assembling the releases.
#
# See the documentation at the top of the prep_release script for further
# instructions.

# TODO: Android stuff.

bundle_prefix=com.spideroak
app_name=spideroak-client
ios_plat_dir=ios
android_plat_dir=android        # Not yet implemented.

DO_RUN=""
VERBOSE=""
if [ -z "$*" ]; then
  # Whoops - run prep_release with action inhibited, to just get settings:
  INHIBIT_PREP=1
elif [ x--run == "x$1" ]; then
  DO_RUN=true
  shift
elif [ x--verbose == "x$1" ]; then
  VERBOSE=true
  shift
fi

export BUILD_PLATFORM=true
tools_dir="$(dirname "$0")"
. "${tools_dir}/prep_release"

pluginstaller_dir="${tools_dir}/pluginstall"
pluginstaller="${pluginstaller_dir}/cli.js"
plugins_dir="${artifacts_dir}/PhoneGap/Plugins"

if [ -n "$INHIBIT_PREP" ]; then
  echo $(basename "$0") requires explicitly specified variations - 1>&2
  variants_message 1>&2
  exit 1
fi

phonegap_targets_dir="${releases_dir}/PhoneGap"
phonegap_ios_tools_version=2.2.0
phonegap_ios_tools_dir="${tools_dir}/PhoneGap_${phonegap_ios_tools_version}/ios"

fabricate_apps () {
  # Loop through the elected categories, fabricating apps for each variant.

  if [ ! -d "${phonegap_targets_dir}" ]; then
    blather "(Creating phonegap targets dir ${phonegap_targets_dir})"
    mkdir -p "${phonegap_targets_dir}"
  fi

  for brand in $selected_brands; do
    for color in $selected_color_schemes; do
      for platform in $selected_platform_styles; do
        fabricate_$platform $brand $color
      done
    done
  done
}

# Create a fabricate_<platform> routine for each supported platform.

fabricate_ios () {
  local brand="$1"; shift
  local color="$1"; shift
  local ios_app_spec="${brand}-${color}"
  local ios_container="${phonegap_targets_dir}/${ios_plat_dir}"
  if [ ! -d "${ios_container}" ]; then
    blather Creating ios build directory "${ios_container}"
    mkdir -p "${ios_container}"
  fi
  local target_dir="${ios_container}/${ios_app_spec}"
  blather Fabricating ${ios_app_spec} \
          with PhoneGap iOS ${phonegap_ios_tools_version}
  if [ ! -d "$target_dir" ]; then
    blather Create mode...
    "${phonegap_ios_tools_dir}"/bin/create \
      "${target_dir}" \
      "${bundle_prefix}.${app_name}" \
      "${app_name}" \
      "${app_name}"
  else
    blather Refurnish mode...
  fi

  blather Situate web sources...
  # Situate the application html5 components in the project:
  cp -a "${releases_dir}/${ios_app_spec}-ios/"* "${target_dir}/www/"
  rm -f "${target_dir}/www/cordova-*.js"
  cp    "${phonegap_ios_tools_dir}"/CordovaLib/cordova.ios.js \
        "${target_dir}/www/cordova-${phonegap_ios_tools_version}.js"
  # Redo index.html, substituting the right cordova-X.Y.Z.js version number:
  sedexpr='s/\(^.* src="cordova-\)'
  sedexpr="$sedexpr"'[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*'
  sedexpr="$sedexpr"'\(\.js.*AUTO EDIT CORDOVA VERSION.*$\)/'
  sedexpr="$sedexpr"'\1'"${phonegap_ios_tools_version}"'\2/'
  sed -e "$sedexpr" "${releases_dir}/${ios_app_spec}-ios/index.html" \
         > "${target_dir}/www/index.html"

  blather Situate project configuration files...
  # Situate adjusted project configuration files:
  # For ExternalHosts whitelist:
  cp "${artifacts_dir}"/ios_project/Cordova.plist "${target_dir}/${app_name}/"
  # Situate the desktop and app brand icons, and files that reference them:
  cp -a "${target_dir}"/www/brand_images/* "${target_dir}"/
  cp "${artifacts_dir}/ios_project/${app_name}"-Info.plist \
     "${target_dir}/${app_name}"/
  cp "${artifacts_dir}"/ios_project/project.pbxproj \
     "${target_dir}/${app_name}".xcodeproj/

  blather Situate plugins...
  situate_plugins ios "${target_dir}"

  blather Build...
  if [ -z "${VERBOSE}" ]; then
    "${target_dir}"/cordova/build > /dev/null
  else
    "${target_dir}"/cordova/build
  fi

  if [ -n "$DO_RUN" ]; then
    blather ...and run...
    if [ -z "${VERBOSE}" ]; then
      "${target_dir}"/cordova/emulate > /dev/null
    else
      "${target_dir}"/cordova/emulate
    fi
  else
    blather Done.
  fi
  ls -d "${target_dir}/build/${app_name}.app"
}

make_pluginstaller () {
  # Ensure that the plugins installer is built.
  # Simple criteria: the absence of the node_modules subdirectory.
  if [ ! -e ${pluginstaller_dir}/node_modules ]; then
    if ! type npm > /dev/null; then
      echo npm, necessary to build PhoneGap plugin installer, not found. 1>&2
      exit 1
    fi
    blather Pluginstall node_modules absent, pluginstall needs building.
    blather Building pluginstall...
    pushd ${pluginstaller_dir}
    npm install
    # XXX The pluginstall tests always fail, but not entirely consistently.
    #blather Testing pluginstall...
    #npm test > /dev/null
    popd
  fi
}

situate_plugins () {
  # Situate all of the plugins in the indicated application package.
  # XXX For now we're very coarse about this - include all plugins in the
  #     ios packages.  Eventually we're going to have to discriminate,
  #     idenitifying which plugins are for which platforms.
  # XXX 2013-01-16 With the keychain plugin, the Cordova.plist entries are not
  #     being properly included, so I've added them to the template plist. This
  #     is is not sufficient - the plugin 'getForKey' isn't working.  This
  #     needs to be properly solved.
  local platform="$1"
  local package="$2"

  for plugin_path in "${plugins_dir}"/*; do
    if [ -d "${plugin_path}"/src/"${platform}" ]; then
      blather "... ${plugin_path##*/} ${platform}"
      ${pluginstaller} "${platform}" "${package}" "${plugin_path}"
    elif [ -z "${VERBOSE}" ]; then
      blather "... (no ${plugin_path##*/} implementation for ${platform})"
    fi
  done
}

# Ensure that pluginstall is made:
make_pluginstaller

# Do the important stuff:
fabricate_apps
