#!/bin/bash -e

# Copyright 2012 SpiderOak, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Produce various releasable renderings of the SpiderOak mobile client app.
# With no args, produce all the variants.  Arguments select for production
# only the specified variants within the arguments' categories.

# The process is organized around three things:
#
# 1. Configuration variables, in the Configure Variation Categories section.
#    These variables define the variations within release categories, including
#    aspects such as app branding, color scheme, and platform theme.
# 2. Code and media resources situated in specific locations, with those that
#    are variant-specific associated with the variation categories.
# 3. Command arguments, identifying selections among the variant categories.
#
# If you invoke this script (or scripts that use it) without any arguments,
# or with the first argument = "--all", then all variants for all
# categories will be produced.  Any other arguments will be used to select
# only the variants within their categories for production. So if invoked
# with an argument naming one of the brand targets, then only that brand
# will be updated, with the other categories (color scheme and platform
# style) going through all their variants.


# ==============================
# Configure Variation Categories:

# To add a new brand rendering, add an entry to the "brands" list and the
# following artifacts in the (defined below) 'artifacts_dir':
#
# brand_${name}.js - brand-specific js; adapt existing 'brand_spideroak.js'.
# brand_images_${name}_orange/ - brand-specific images suitable for orange theme
# brand_images_${name}_blue/ - brand-specific images suitable for blue and other
#                              dark themes

brands="spideroak acme"

# To add a new theme platform, include the theme file name (sans .css) in
# $platform_styles:

platform_styles="ios"

# To add a new theme color, add a swatch using the jQuery Mobile theme roller,
# and add an entry in the color_schemes list:

color_schemes="orange blue neutral green"

# ... plus identification of the swatch here:

basis_swatch="f"                # The swatch used in the dev copy.
orange_swatch="f"
neutral_swatch="g"
green_swatch="h"
blue_swatch="i"

# We have two batches of image artifacts - orange and blue.  The various
# colored themes uses one of those batches, as follows:
orange_category=orange
blue_category=blue
green_category=blue
neutral_category=blue

#    Manually edit $app_dir/css/themes/tweaks.css
#
# to add a border-color value in a section for that swatch:
#
#   [data-role=header] .header-title[data-theme=<swatch-letter>]
#
# (This adds a subdued border color for the header title, both for appearance
# and as a cue that the title is clickable.)
# Copy and adjust an existing one.  (Using the same value as the iphone.css
# .ui-btn-up-<swatch> "border" value works well.)

# Finally, choose the rendering for the development version:
prototype_brand="spideroak"
prototype_color="orange"
prototype_platform="ios"

# ====================================================================
# Internal configuration and processing below.

blathering=non-empty           # set to empty to eliminate blather messages
blather () {
  if [ -n "$blathering" ]; then
    echo ${@}
  fi; }

# The html for the spideroak orange rendering is the basis from which all
# the other renderings are derived.
#
# The other renderings are derived using:
#
# - HTML textual conversions, adjusting theme swatches and doing some other
#   textual substitutions
# - resource selection, where resource directories (containing icons,
#   javascript code) are composed with rendering-specific constituents
# - javascript settings, used by the application script to do programmatic
#   adjustments of release-specific legends and addresses
# - CSS conditions, adjusting some style aspects according to, eg, jQm swatch
#   choices

# Resource organization: the renderings are located in the $releases_dir:

script_dir="$(dirname "$0")"    # Surprisingly, the interior quoting happens.
app_dir="$(dirname "${script_dir}")"
releases_dir="${app_dir}/releases"
artifacts_dir="${app_dir}/release_artifacts"

unconditional_infrastructure=\
"$app_dir/css
$app_dir/icons.css
$app_dir/jquery.mobile-1.2.0
$app_dir/jquery-1.8.3
$app_dir/custom-scripting.js
$app_dir/js_aux
$app_dir/SpiderOak.js"

# The releases are named <brand>-<color>-<platform>, for all combinations of
# $brands, $color_schemes, and $platform_styles:

selected_brands=""
selected_platform_styles=""
selected_color_schemes=""

verify_prototype_synced () {
  # Bail if the prototype copies of release artifacts have diverged.
  local different=""
  local release_settings="${artifacts_dir}/brand_settings_${prototype_brand}.js"
  diff --brief "${app_dir}/brand.js" "${release_settings}" || different=1
  local release_icons="${artifacts_dir}/icons_${prototype_color}"
  diff -r --brief "${app_dir}/icons" "${release_icons}" || different=1
  local release_images="${artifacts_dir}/brand_images_"
  release_images="${release_images}${prototype_brand}_${prototype_color}"
  diff -r --brief "${app_dir}/brand_images" "${release_images}" || different=1
  if [ -n "$different" ]; then
    return 1
  fi
  return 0
}

select_variations () {
  # Loop through the command arguments, selecting them from their categories
  # for production.
  if [ x--all == "x$1" ]; then
    selected_brands="$brands"
    selected_color_schemes="$color_schemes"
    selected_platform_styles="$platform_styles"
  else
    errors=""
    for arg in "$@"; do
      if [[ "$brands" =~ "${arg}" ]]; then
        selected_brands+="$arg "
      elif [[ "$color_schemes" =~ "${arg}" ]]; then
        selected_color_schemes+="$arg "
      elif [[ "$platform_styles" =~ "${arg}" ]]; then
        selected_platform_styles+="$arg "
      else
        echo Unrecognized variant: "'$arg'". 1>&2
        errors=1
      fi
    done
    if [ -n "$errors" ]; then
      echo Please retry with available variantions... 1>&2
      variants_message 1>&2
      exit 1
    fi
  fi

  if [ -z "$selected_brands" ]; then
    selected_brands="$brands"
  fi
  if [ -z "$selected_platform_styles" ]; then
    selected_platform_styles="$platform_styles"
  fi
  if [ -z "$selected_color_schemes" ]; then
    selected_color_schemes="$color_schemes"
  fi
}

variants_message () {
  echo Available variations:
  echo "  Brands: $brands"
  echo "  Colors: $color_schemes"
  echo "  Platforms: $platform_styles"
}

produce_releases () {
  # Loop through the elected categories, producing releases for each variation.
  echo "  Selected brands: $selected_brands"
  echo "  Selected colors: $selected_color_schemes"
  echo "  Selected platforms: $selected_platform_styles"
  for brand in $selected_brands; do
    for color in $selected_color_schemes; do
      for platform in $selected_platform_styles; do
        produce_a_release $brand $color $platform
      done
    done
  done
}

produce_a_release () {
  # Create a release, using the following parameters:
  local brand="$1"; shift
  local color="$1"; shift
  local platform="$1"; shift

  local target_dir="${releases_dir}/$brand-$color-$platform"
  blather "Composing $target_dir"

  if [ ! -e "$target_dir" ]; then
    blather Create $target_dir.
    mkdir "${target_dir}"
  fi

  # Context-independent stuff.

  # Restrict Internal Field Separator to just newline, so whitespace in
  # directory names is not treated as a delimiter in the following for loop.
  wasIFS="$IFS"; IFS="
"
  for item in $unconditional_infrastructure; do
    copy_sync "$item" "${target_dir}"/
  done
  IFS="$wasIFS"

  # Context-sensitive stuff.

  # Various color themes use image batches in one of fewer color categories.
  # We resolve this with the ${color}_category variables:
  eval color_category="\$${color}_category"

  # icons dir:
  copy_sync "${artifacts_dir}/icons_${color_category}/" "${target_dir}/icons"

  # brand_images dir:
  eval color_images="\$${color}_category"
  copy_sync "${artifacts_dir}/brand_images_${brand}_${color_category}/" \
            "${target_dir}/brand_images"

  # brand.js brand settings:
  copy_sync "${artifacts_dir}/brand_settings_${brand}.js" \
            "${target_dir}/brand.js"

  # index.html:
  eval to_swatch="\$${color}_swatch"
  if [ -z "$to_swatch" ]; then
    blather Failed target theme swatch ${color}_swatch identify, \
      passing through 1>&2
    to_swatch=${basis_swatch}
  fi
  rm -f "${target_dir}/index.html"
  if [ "${to_swatch}" = "${basis_swatch}" ]; then
    cp -a "${app_dir}/index.html" "${target_dir}/index.html"
  else
    sed -e 's/"f"/"'${to_swatch}'"/g' \
        "${app_dir}/index.html" \
        > "${target_dir}/index.html"
  fi
}

sync_prototype_copies () {
  # Copy over the artifacts for the prototype/development environment:
  blather Resync the prototype/development environment
  local brand_images_prefix="${releases_dir}/brand_images_${prototype_brand}_${prototype_color}"
  local icons_color_prefix="${releases_dir}/icons_${prototype_color}"
  rm -rf "${app_dir}"/icons \
    && cp -r "${artifacts_dir}/icons_${prototype_color}" "${app_dir}/icons"
  rm -f "${app_dir}"/brand.js \
    && cp "${artifacts_dir}/brand_settings_${prototype_brand}.js" \
          "${app_dir}/brand.js"
  rm -rf "${app_dir}"/brand_images \
    && cp -r \
        "${artifacts_dir}/brand_images_${prototype_brand}_${prototype_color}" \
        "${app_dir}/brand_images"
}

copy_sync () {
  # Copy contents of $1 to $2, using rsync to track deletions.
  # That incidentally allows us to avoid unnecessary copying.
  rsync --delete --update --archive --exclude '*~' --exclude '#*' "$1" "$2"
}

main () {
  if [ -z "$INHIBIT_PREP" ]; then
    if [[ x"$*" =~ "x--help" ]]; then
      blather usage: $(basename $0) "[ variant-selectors ... ]"
      blather or usage: $(basename $0) --sync-prototype
      blather You can select any combination of variants.
      blather Selecting none from a category will do all in that category.
      variants_message
      exit 0
    elif [[ x"$*" =~ "x--sync-prototype" ]]; then
      sync_prototype_copies
      exit 0
    fi

    if [ ! -d "${releases_dir}" ]; then
      blather "(Creating releases dir.)"
      mkdir -p "${releases_dir}"
    fi

    if ! verify_prototype_synced; then
      echo Prototype artifacts diverge. 1>&2
      echo Ensure desired prototype brand/icon edits are preserved, then 1>&2
      echo run with --sync-prototype option to overwrite prototype copies 1>&2
      exit 1
    fi

    select_variations "$@"

    produce_releases

    blather "Prep done."
  fi
}

main "$@"
