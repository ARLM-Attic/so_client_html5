#!/bin/bash -e

# Produce various releasable renderings of the SpiderOak mobile client app.

# The process is organized around two things:
#
# 1. Configuration variables, in the Releases section below, which list the
#    various brand and theme variations.  One of each theme variant will be
#    created for each brand variant.
# 2. Code and media resources situated in specific locations, using names
#    connected with the configuration vars.
#
# To add a new brand rendering, add an entry to the "brands" list and the
# following artifacts in the (defined below) 'artifacts_dir':
#
# brand_${name}.js - brand-specific js; adapt existing 'brand_spideroak.js'.
# brand_images_${name}_orange/ - brand-specific images suitable for orange theme
# brand_images_${name}_blue/ - brand-specific images suitable for blue and other
#                              dark themes

brands="spideroak avg"

# To add a new theme platform, include the theme file name (sans .css) in
# $theme_platforms:

theme_platforms="iphone"

# To add a new theme color, add a swatch using the jQuery Mobile theme roller,
# and add an entry in the theme_colors list:

theme_colors="orange blue neutral green"

# ... plus identification of the swatch here:

basis_swatch="f"                # The swatch used in the dev copy.
orange_swatch="f"
neutral_swatch="g"
green_swatch="h"
blue_swatch="i"

# We have two batches of image artifacts - orange and blue.  The various
# colored themes uses one of those batches, as follows:
orange_category=orange
blue_category=blue
green_category=blue
neutral_category=blue

#    Manually edit $app_dir/css/themes/tweaks.css
#
# to add a border-color value in a section for that swatch:
#
#   [data-role=header] .header-title[data-theme=<swatch-letter>]
#
# (This adds a subdued border color for the header title, both for appearance
# and as a cue that the title is clickable.)
# Copy and adjust an existing one.  (Using the same value as the iphone.css
# .ui-btn-up-<swatch> "border" value works well.)

# Finally, choose the rendering for the development version:
dev_brand="spideroak"
dev_color="orange"
dev_platform="iphone"

# ====================================================================
# Internal configuration and processing below.

blathering=non-empty           # set to empty to eliminate blather messages
blather () {
  if [ -n "$blathering" ]; then
    echo ${@}
  fi; }

# The html for the spideroak orange rendering is the basis from which all
# the other renderings are derived.
#
# The other renderings are derived using:
#
# - HTML textual conversions, adjusting theme swatches and doing some other
#   textual substitutions
# - resource selection, where resource directories (containing icons,
#   javascript code) are composed with rendering-specific constituents
# - javascript settings, used by the application script to do programmatic
#   adjustments of release-specific legends and addresses
# - CSS conditions, adjusting some style aspects according to, eg, jQm swatch
#   choices

# Resource organization: the renderings are located in the $releases_dir:

script_dir=$(dirname "$0")

if [ ! -d "${script_dir}/../releases" ]; then
    blather -n Creating releases dir:
    mkdir -p "${script_dir}/../releases"
    cd "${script_dir}/../releases"
    blather $PWD
else
    cd "${script_dir}/../releases"
fi

releases_dir="$PWD"
app_dir="$(dirname $PWD)"
artifacts_dir="$app_dir/release_artifacts"

unconditional_infrastructure=\
"$app_dir/css
$app_dir/icons.css
$app_dir/jquery.mobile-1.2.0_pre
$app_dir/jquery-1.7.2
$app_dir/custom-scripting.js
$app_dir/js_aux
$app_dir/SpiderOak.js"

# The releases are named <brand>-<theme-color>, for all combinations of
# $brands, $theme_colors, and $theme_platforms:

produce_all_releases () {
  for brand in $brands; do
    for color in $theme_colors; do
      for platform in $theme_platforms; do
        produce_release $brand $color $platform
      done
    done
  done

  link_dev_env

  blather "Done."
}

produce_release () {
  # Create a release, using the following parameters:
  local brand="$1"; shift
  local color="$1"; shift
  local platform="$1"; shift

  local target_dir="$brand-$color-$platform"
  blather "Composing $target_dir"

  if [ ! -e "$target_dir" ]; then
    blather Create $target_dir.
    mkdir "${target_dir}"
  fi

  # Context-independent stuff.

  for item in $unconditional_infrastructure; do
    copy_sync $item "${target_dir}"/
  done

  # Context-sensitive stuff.

  # Various color themes use image batches in one of fewer color categories.
  # We resolve this with the ${color}_category variables:
  eval color_category="\$${color}_category"

  # icons dir:
  copy_sync "${artifacts_dir}/icons_${color_category}/" "${target_dir}/icons"

  # brand_images dir:
  eval color_images="\$${color}_category"
  copy_sync "${artifacts_dir}/brand_images_${brand}_${color_category}/" \
            "${target_dir}/brand_images"

  # brand.js brand settings:
  copy_sync "${artifacts_dir}/brand_settings_${brand}.js" \
            "${target_dir}/brand.js"

  # SpiderOak.html:
  eval to_swatch="\$${color}_swatch"
  if [ -z "$to_swatch" ]; then
    blather Failed target theme swatch ${color}_swatch identify, \
      passing through 1>&2
    to_swatch=${basis_swatch}
  fi
  rm -f "${target_dir}/SpiderOak.html"
  if [ "${to_swatch}" = "${basis_swatch}" ]; then
    cp -a "${app_dir}/SpiderOak.html" "${target_dir}/SpiderOak.html"
  else
    sed -e 's/"f"/"'${to_swatch}'"/g' \
        "${app_dir}/SpiderOak.html" \
        > "${target_dir}/SpiderOak.html"
  fi
}

link_dev_env () {
  # Last, establish links for development environment:
  blather Re-linking dev env
  brand_images_link_prefix="releases/brand_images_${dev_brand}_${dev_color}"
  icons_color_link_prefix="releases/icons_${dev_color}"
  rm -f "${app_dir}"/icons \
    && ln -s "release_artifacts/icons_${dev_color}" "${app_dir}/icons"
  rm -f "${app_dir}"/brand.js \
    && ln -s "release_artifacts/brand_settings_${dev_brand}.js" "${app_dir}/brand.js"
  rm -f "${app_dir}"/brand_images \
    && ln -s "release_artifacts/brand_images_${dev_brand}_${dev_color}" \
             "${app_dir}/brand_images"
}

copy_sync () {
  # Copy contents of $1 to $2, using rsync to track deletions.
  # That incidentally allows us to avoid unnecessary copying.
  rsync --delete --update --archive --exclude '*~' --exclude '#*' "$1" "$2"
}

produce_all_releases;
