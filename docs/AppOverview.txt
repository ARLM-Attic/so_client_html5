[[PageOutline]]
= HTML5 Client Architecture and Use =

Essential architectural and other technical details of the !SpiderOak HTML5
application. See [[HTML5ClientProject]] for project status, etc.

== Salient Architectural Details ==
=== Dynamic Pages ===
Storage, Share Rooms are implemented as jQuery Mobile "pages" (`<div
data-role="page>`) generated dynamically from cloned copies of static
template DOM nodes, upon in-app traversal of particular URLs.
* The spideroak object's `.handle_content_visit()` method is assigned as a
  handler to the jQuery Mobile `pagebeforechange` event, which tracks
  changes to the browser's `location.hash` setting.
* The handler discerns navigation to URLs with hash portions that are
  within the user's !SpiderOak-managed content, and:
  * Fetches a suitable `ContentNode`-based object for the node using
    `spideroak.content_node_manager.get()`, which returns an already existing
    node, if any, else manufactures a new one with suitable initial
    settings.
  * The respective `ContentNode` object uses its `.visit()` method to the
    handle the visit.
* `ContentNode.visit()`:
  * Fetches the node contents from the server if necessary (''intially,
    always necessary'')
  * Gets a jQuery object for the node's data-role="page", cloning the
    !SpiderOak.html id="storage-page-template" &lt;div&gt; and adjusts
    the basic structure, if that's not already been done.
  * Fills in the page header with the node's navigation context
  * Populates the page listview with entries for the nodes contents
=== `ContentNode` Geneology ===
The `ContentNode` object hierarchy provides for shared and distinct
functionality for obtaining, assimilating, and presenting the remote data
describing !SpiderOak-managed user content items - devices, folders, and
file "nodes".
* `ContentNode` - Basis
  * `StorageNode` - Backups content
    * `RootStorageNode`
    * `DeviceStorageNode`
    * `DirectoryStorageNode`
    * `FileStorageNode`
  * `ShareNode` - Share Rooms - XXX not yet implemented
=== Storage Login and Share Rooms Authentication ===

== Incidental Technical Details and Hanging Issues ==
=== Special Browser Requirements ===
To get around CORS restrictions (without JSONP, which the SpiderOak storage
repo does not accept), you need to run your browser with drastically
reduced security. I haven't figured out how to do that with Firefox (even
when using the Force CORS addon - suggestions welcome). Based on
suggestions from Chip, you can use Chrome by starting it with the these
arguments:
* `--allow-file-access-from-files --allow-http-access-from-files --disable-web-security --enable-file-cookies`

* Since I generally use Chrome as my primary browser, I installed a copy
  of [https://tools.google.com/dlpage/chromesxs Chrome Canary], so I can run
  a separate, insecure session concurrent with my regular Chrome session. I
  haven't hit any problems specific to running Canary, but I may have
  been lucky in the
  [https://spideroak.com/browse/share/klm/1n4c04lm1n3 particular MacOS Canary build]
  that I'm using. If you hit odd problems, try restarting regular Chrome
  with the arguments, just to see that things work.'

This approach will almost certainly change when the app is packaged for
mobile and web deployment.
=== Managing the UI Theme ===
The default set of jQuery Mobile theme swatches get us near enough to
Mike's designs to be worth building on. The jQm theme roller gets us
closer, but unfortunately its too low resolution to avoid some custom
tailoring and contortions to get us the rest of the way. It's necessary to
know some details about using the tool in order to continue to leverage its
benefits while preserving our custom tailoring.

==== Maintaining our theme through the theme roller ====
The most essential maintenance routine is feeding our tailored css back
into the tool in order to use its minification feature, use the tool for
the limited adjustments it can do, and eventually, use it to upgrade to
subsequent jQm versions.

To do so:
* Visit the tool at http://jquerymobile.com/themeroller/
* Open the "Import (or Upgrade)" activity
* Enter our adjusted css/themes/spideroak.css in the text box and hit Import
* Make adjustments
* Use the "Download (theme zip file)" activity to get the zip file
* Put in place copies of the desired artifacts - .css, .min.css, and incidentals

==== Interspersing theme swatches on pages ====
Because button and list item styles are used across theme swatch page
elements (header, content, footer), we sometimes have to use different
swatches for different parts of the same page.

==== Generating our basic theme, in the first place ====
In case we need to re-derive our theme, it's based closely on the default
jQm theme, using the following procedure:

0. Visit http://jquerymobile.com/themeroller/
1. Use "Import or Upgrade" tab and "Import default theme"
2. Turn swatch A to stark white:
   - Copy the white patch to the header
   - Set header/footer background gradient to be #ffffff to #ffffff
   - Copy the white patch to the content body
   - Set content background gradient to be #ffffff to #ffffff
3. Download (with name "spideroak")
4. Unzip in css subdir, or elsewhere and copy out the specific artifacts.

=== Hanging issue: Failing to get reused page dynamic listview enhancments ===
`As of 2012-05-22`

`ContentNode.prototype.layout()` asks for a fresh clone of the
storage-page-template every time to workaround inability to get
`$list.listview()` to completely enhance the contents list.

I expected to be able to reuse the cloned page, on revisits to a node, by
first `.empty()` emptying the existing `data-role="listview"` element and
using the `.listview()` enhancement routine on the rebuilt list jQuery
object. The resulting lists lack properly rounded corners.  (I make sure
that the list is reset to had to discover that the containing `$page`
object must have had at least one `$page.page()` invoked for the
`$list.listview()` method to run without an error, but some of the
enhancements are neglected, including properly rounded list item corners.
